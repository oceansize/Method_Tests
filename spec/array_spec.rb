describe 'Array' do

  context 'APPEND (<<):' do
    it 'Adds a number or array to the end of an existing array (can also access multidimensional arrays)' do
      arr = [1,2,3,4,5,6,[7,8,9],10]
      arr[6] << 99
      expect(arr[6][3]).to eq 99
    end
  end

  context 'COUNT:' do
    it 'Counts the number of elements in an array. Can pass in blocks' do
      arr = [1,2,3,4,5,6]
      expect(arr.count).to eq 6
      # The flatten method allows all arrays within to be included in the count
      arr_2 = [1,2,3,4,5,6,[7,8,9],10]
      expect(arr_2.flatten.count).to eq 10
      # This block statment filters out certain conditions
      arr_3 = arr.count { |element| element < 5 }
      expect(arr_3).to eq 4
    end
  end

  context 'DELETE:' do
    it 'Deletes an element of an array based on it\'s content' do
      # NB - NOT index-based
      array = ["cat","dog","monkey","giraffe","elephant","squirrel"]
      array.delete("dog")
      expect(array).to eq ["cat", "monkey", "giraffe", "elephant", "squirrel"]
    end
  end

  context 'DELETE_AT:' do
    it 'Deletes an element of an array based on it\'s index' do
      array = ["cat","dog","monkey","giraffe","elephant","squirrel"]
      array.delete_at(1)
      expect(array).to eq ["cat", "monkey", "giraffe", "elephant", "squirrel"]
    end
  end

  context 'DELETE_IF:' do
    it 'Deletes elements of an array based on the conditions within a block' do
      array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      array.delete_if { |number| number > 5 }
      expect(array).to eq [1, 2, 3, 4, 5]
    end
  end

  context 'EACH:' do
    it 'Executes a block on each element of an array' do
      array = [1, 2, 3, 4, 5, 6]
      update = 0
      array.each { |elem| update +=  1 }
      expect(update).to eq 6
    end
  end

  context 'EACH_INDEX:' do
    it 'Executes a block on each index of an array' do
      array = [1, 2, 3, 4, 5, 6]
      update = 0
      array.each_index { |index| update = index }
      expect(update).to eq 5
    end
  end

  context 'EMPTY?:' do
    it 'Tests to see if an array is empty' do
      array = [1, 2, 3, 4, 5, 6]
      expect(array.empty?).to be false
      array_2 = []
      expect(array_2.empty?).to be true
    end
  end

  context 'FLATTEN:' do
      it 'Flattens a multidimensional array, to a single array' do
        array = [1, 2, 3, [4, [9,2,5,7], 5], 6]
        expect(array.flatten).to  eq [1, 2, 3, 4, 9, 2, 5, 7, 5, 6]
      end
    end

  context 'FIND_INDEX:' do
    it 'Returns the index number of an element in an array, based on that element\'s value' do
      array = ["cat","dog","human"]
      expect(array.find_index("human")).to eq 2
    end
  end

  context 'INCLUDE?:' do
      it 'Flattens a multidimensional array, to a single array' do
      array = ["cat","dog","human"]
      expect(array.include?("dog")).to be true
      expect(array.include?("robot")).to be false
    end
  end

  context 'JOIN:' do
    it 'Collapses an array into a string (with optional argument to supply spacing characters)' do
      array = ["cat","dog","human"]
      expect(array.join).to eq "catdoghuman"
      expect(array.join('***')).to eq "cat***dog***human"
    end
  end

  context 'KEEP_IF:' do
    it 'Discards all elements of an array that evaluate false' do
      array = [1,2,3,4,5,6,7,8]
      array.keep_if { |element| element < 5}
      expect(array).to eq [1,2,3,4]
    end
  end

  context 'LAST:' do
    it 'Returns the last element of an array' do
      array = [1,2,3,4,5,6,7,8]
      expect(array.last).to eq 8
    end
  end

  context 'MAP:' do
    it 'Creates a new array with values generated by the block (has ! option)' do
      array = [1,2,3,4,5,6,7,8]
      mapped = array.map! {|elem| elem + 1}
      expect(mapped).to eq [2,3,4,5,6,7,8,9]
    end
  end

  context 'POP:' do
    it 'Removes the last element(s) from an array' do
      array = [1,2,3,4,5,6,7,8]
      expect(array.pop(2)).to eq [7,8]
    end
  end

  context 'PUSH:' do
    it 'Adds element(s) to the end of an array' do
      array = [1,2,3,4]
      expect(array.push(5,6)).to eq [1,2,3,4,5,6]
    end
  end

  context 'REJECT:' do
    it 'Returns a new array minus elements that return false. ! option makes it identical to DELETE_IF' do
      array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
      rejected = array.reject { |elem| elem > 6}
      expect(rejected).to eq [1,2,3,4,5,6]
    end
  end

  context 'SELECT:' do
    it 'Returns a new array containing all elements that return true. ! option makes it identical to KEEP_IF' do
      array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
      selected = array.select { |elem| elem < 6}
      expect(selected).to eq [1,2,3,4,5]
    end
  end

  context 'REVERSE:' do
    it 'Reverses the order of elements in an array. Has ! option' do
      array = [1, 2, 3, 4, 5]
      expect(array.reverse).to eq [5, 4, 3, 2, 1]
    end
  end
=begin
  context 'SAMPLE:' do
    it 'Returns a random value from the array. Optional argument can yield an array of multiple values' do
      array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
      expect(array).to eq [].shuffle[1]
    end
  end
=end

  context 'SHUFFLE:' do
    it 'Randomizes the order of elements in an array. Has ! option' do
      array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
      expect(array.shuffle).to_not eq [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
    end
  end

  context 'SIZE:' do
    it 'Returns the amount of elements in array. Exactly the same as LENGTH' do
      array = [1, 2, 3, 4, 5]
      expect(array.size).to eq 5
    end
  end

  context 'SLICE:' do
    it 'Deletes elements given by index. Can accomodate ranges' do
      array = ['a','b','c','d','e','f','g','h','i','j','k']
      expect(array.slice!(5..8)).to eq ["f", "g", "h", "i"]
    end
  end

  # context 'EACH_SLICE:' do
  #   it 'Returns multiple arrays of equal index length (specified by argument.)' do
  #     array = ['a','b','c','d','e','f','g','h','i']
  #     sliced_up = [['a','b','c'],['a','b','c'],['a','b','c']]
  #     sliced_up << array.each_slice(3)
  #     expect(sliced_up).to eq ["f", "g", "h", "i"]
  #   end
  # end

  context 'SORT:' do
    it 'Rearranges array based on values. Can be supplied a block.' do
      array = ["b","a","d","c"]
      expect(array.sort).to eq ["a","b","c","d"]
    end
  end

  context 'TRANSPOSE:' do
    it 'With a two-dimensional array, transposes rows and columns' do
      array = [[1,2],[3,4],[5,6]]
      expect(array.transpose).to eq [[1, 3, 5], [2, 4, 6]]
    end
  end

  context 'UNIQ' do
    it 'Returns a new array with unique values and ignores any duplicates. Has ! option.' do
      arr = [1,2,3,4,4,4,5,5,6,7,8,9,9,9]
      expect(arr.uniq).to eq [1, 2, 3, 4, 5, 6, 7, 8, 9]
    end
  end

  context 'ALL?:' do
    it 'Returns true if all elements match given condition(s)' do
      array = [22,33,44,54,66]
      all = array.all? { |elem| elem % 11 == 0 }
      expect(all).to be false
    end
  end

  context 'ANY?:' do
    it 'Returns true if at least one element match given condition(s)' do
      array = [22,33,44,54,66]
      all = array.any? { |elem| elem % 11 == 0 }
      expect(all).to be true
    end
  end

  context 'FIND: (ALSO DETECT:)' do
    it 'Returns the first matching element based on conditions passed in a block' do
      array = [22,33,44,54,66]
      found = array.find { |elem| elem > 5 }
      expect(found).to eq 22
    end
  end

  context 'FIND_ALL:' do
    it 'Returns all matching elements based on conditions passed in a block' do
      array = [22,33,44,54,66]
      found = array.find_all { |elem| elem > 5 }
      expect(found).to eq [22, 33, 44, 54, 66]
    end
  end

  context 'INJECT: (same as REDUCE:)' do
    it 'Performs a recursive mathmatical operation on all elements and returns the total' do
      array = [22,33,44,54,66]
      expect(array.inject(:+)).to eq 219
    end
  end

  context 'MAX:' do
    it 'Returns the highest value in an array' do
      array = [22,33,44,54,66]
      expect(array.max).to eq 66
    end
  end

  context 'MIN:' do
    it 'Returns the lowest value in an array' do
      array = [22,33,44,54,66]
      expect(array.min).to eq 22
    end
  end

  context 'TO_H:' do
    it 'Converts a two-dimensional array into a hash' do
      array = [[1,2],[3,4],[5,6]]
      expect(array.to_h).to include(1=>2,3=>4,5=>6)
    end
  end
end